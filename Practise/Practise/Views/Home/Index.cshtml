@{
    ViewBag.Title = "Home Page";
}

<div class="jumbotron">
    <h1>ASP.NET</h1>
    <p class="lead">ASP.NET is a free web framework for building great Web sites and Web applications using HTML, CSS and JavaScript.</p>
    <p><a href="http://asp.net" class="btn btn-primary btn-lg">Learn more &raquo;</a></p>
</div>

<div class="row">
    <div class="col-md-4">
        <h2>Getting started</h2>
        <p>
            ASP.NET MVC gives you a powerful, patterns-based way to build dynamic websites that
            enables a clean separation of concerns and gives you full control over markup
            for enjoyable, agile development.
        </p>
        <p><a class="btn btn-default" href="http://go.microsoft.com/fwlink/?LinkId=301865">Learn more &raquo;</a></p>
    </div>
    <div class="col-md-4">
        <h2>Get more libraries</h2>
        <p>NuGet is a free Visual Studio extension that makes it easy to add, remove, and update libraries and tools in Visual Studio projects.</p>
        <p><a class="btn btn-default" href="http://go.microsoft.com/fwlink/?LinkId=301866">Learn more &raquo;</a></p>
    </div>
    <div class="col-md-4">
        <h2>Web Hosting</h2>
        <p>You can easily find a web hosting company that offers the right mix of features and price for your applications.</p>
        <p><a class="btn btn-default" href="http://go.microsoft.com/fwlink/?LinkId=301867">Learn more &raquo;</a></p>
    </div>
</div>
<script>

    var foo="bar" ;
    //let and var
    $(function () {
        log(foo) ;
        Bar() ;
        log(foo) ;
    });

    function Bar()
    {
        var foo="Baz"
        log(foo)  ;
    }

    function Baz(foo)
    {
        foo="Bam" ;
        bam="yay" ;
    }



//above : tests for advanced js
    function TestThis()
    {
        var t= this ===window;
        log(t) ;//true
        //work with object
        let obj={
            number:1,
            GetNumber:function(){
                return this.number;
            }
        }
        log( obj.GetNumber());//out put 1
    }

    //IIFE   have the function work in isolation
    function TestClosure()
    {
        var Counter=(function(){
            let c=0 ;
            return function(a)
            {
                c=c+a   ;
                console.log(c);
            }
        })();

        Counter(0) ;
        Counter(1) ;
        Counter(1) ;
    }

    function TestCodeBlockScope()
    {
        if(1===1)
        {
            var v1=1;
            let l1=2;
        }
        console.log(v1)  ; //********works, var will hoist a declaration
        console.log(l1)  ;//*******error, let won't hoist a declaration
    }

    function TestFunctionScope()
    {
        let l1=1;
        var v1=2;
        var fun2=function(){
            console.log(l1,v1);//output 1, undefined,   'var v1=3' is hosted partly, 'var v1' is hoisted, but the instantiation is not
            var v1=3;
        } 
        fun2();
        console.log(l1,v1);//out put 1,2, the origional values
    }

    function TestType()
    {//findings:   5 primitives: number, string, boolean, undefined,null(typeof(null) return object) and object  => totally, 6 types
        var t=typeof(1.111);//number
        console.log(t) ;
        t=typeof(true);//boolean
        console.log(t) ;
        t=typeof('abc');//string
        console.log(t) ;
        t=typeof(function(){});//function
        console.log(t) ;
        t=typeof(null);//object
        console.log(t) ;
        t=typeof({});//object
        console.log(t) ;
        t=typeof([1,2]);//object
        console.log(t) 
    }

    function TestSpreadArray()
    {
        let cards=[1,2,3]  ;
        Spread(...cards) ;
    }
    function Spread(a,b,c)
    {
        console.log(a,b,c) ;
    }

    function TestDestructuringArray()
    {
        var cards = [1, 2, 4];
        let [c1,...c2]=cards;
        console.log(c1,c2);
    }

    function TestVarAndLet()
    {
        //findings: the let and var could cause different scope, one is function scoped, the other is block scoped
        var tip = 10;
        if (true)
        {
            var tip2 = 20;
            let tip3 = 11;
            const dd = 10;
        }
        console.log(tip2);
        console.log(dd);
       
    }

    function log( a)
    {
        console.log(a) ;
    }

    function testWebSocket()
    { 
       
    }

</script>

